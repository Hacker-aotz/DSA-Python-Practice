high_income = True
good_credit = True
student = True
if (high_income or good_credit) and not student:
    print("Eligible")
else:
    print("Not Eligible")


high_income = False
good_credit = True
student = False
if (high_income or good_credit) or not student:
    print("Eligible")
else:
    print("Not Eligible")


age = 22
if 18 <= age < 35:
    print("Eligible")
else:
    print("Not Eligible")


command = ""
while command.lower() != "quit":
    command = input(">")
    print("ECHO", command)

while True:
    command = input(">")
    print("ECHO", command)
    if command.lower() != "quit":
        break
def greet():
    print("Hi There!")
greet()


def greet(first_name, last_name):
    print(f"Hi There, {first_name} {last_name}!")
    print(f"Hi There, {last_name} {first_name}!")
greet("Aotmick", "Hassan")


def greet(first_name, last_name):
    print(f"Hi There, {first_name} {last_name}!")
    print(f"Hi There, {last_name} {first_name}!")
def get_greet(name):
    return f"Hi, {name}!"
greet("Aotmick", "Hassan")
print(get_greet("Ariyan"))


def increment(number, by):
    return number+by
print(increment(2, by=1))


def increment(number, another, by=1):
    return number*another + by
print(increment(5, 4))


def multiply(*numbers):
    total = 1
    for number in numbers:
        print(number)
        total *= number
    return total
print(multiply(2, 3, 4, 5))


def multiply(*numbers):
    total = 1
    for number in numbers:
        total *= number
    return total
print("Start")
print(multiply(1, 2, 3))


def save_user(**user):
    print(user)
    print(user["name"])
    print(user["id"])
    print(user["sex"])
save_user(id=1, name="Aot", age=22, sex="Male")


message = "a"
def greet(name):
    global message  # Bad practice, don't use it
    message = "b"
greet("Mosh")
print(message)


letters = ['a', "b", "c"]
matrix = [[0, 1], [2, 3]]
zeros = [0]*5
combined = zeros+letters
numbers = list(range(20))
chars = list("Hello World")
print(combined)
print(numbers)
print(chars)
print(len(chars))


letters = ['a', "b", "c"]
letters[0] = "A"
print(letters)


numbers = list(range(20))
print(numbers)
print(numbers[0:6])
print(numbers[:8])
print(numbers[::2])
print(numbers[::-1])


# numbers = list(range(1, 8))
numbers = [0, 1, 2, 4, 4, 4, 4, 4, 6, 8]
first, second, *other, previous, last = numbers
print(first, second)
print(other)
print(previous, last)


letters = ['a', "b", "c"]
# for letter in enumerate(letters):
#     print(letter[0], letter[1])
# for letter in enumerate(letters):
#     print(letter)
for index, letter in enumerate(letters):
    print(index, letter)


letters = ['a', "b", "c"]
for index, letter in enumerate(letters):
    print(index, letter)
print(letters)
del letters[:2]
print(letters)
letters.clear()
print(letters)


letters = ['a', "b", "c", "d", "d"]
print(letters.count("d"))
if "e" in letters:
    print(letters.index("e"))
numbers = [5, 9, 100, 502, 8, 6]
print(numbers)
numbers.sort()
print(numbers)
numbers.sort(reverse=True)
print(numbers)
numbers = [5, 9, 100, 502, 8, 6]
print(sorted(numbers))
print(sorted(numbers, reverse=True))


items = [
    ("Product1", 10),
    ("Product2", 9),
    ("Product3", 12),
]
def sort_item(item):
    return item[1]
items.sort(key=sort_item)
print(items)


items = [
    ("Product1", 10),
    ("Product2", 9),
    ("Product3", 12),
]
items.sort(key=lambda item: item[1])
print(items)


items = [
    ("Product1", 10),
    ("Product2", 9),
    ("Product3", 12),
]
prices = list(map(lambda item: item[1], items))
print(prices)
for item in items:
    prices.append(item[1])
print(prices
x = map(lambda item: item[1], items)
for item in x:
    print(item)


items = [
    ("Product1", 10),
    ("Product2", 9),
    ("Product3", 12),
]
filtered = list(filter(lambda item: item[1] >= 10, items))
print(filtered)


items = [
    ("Product1", 10),
    ("Product2", 9),
    ("Product3", 12),
]
prices = [item[1] for item in items]
print(prices)
filtered = [item for item in items if item[1] >= 10]
print(filtered)


from array import array
number = array("i", [1, 2, 3, 4, 5])
number.insert(0, 6)
number.remove(6)
print(number)
number.pop()
print(number)


point = dict(x=1, y=2)
point['z'] = 30
print(point)
print(point.get('a', 0))
# del point["z"]
# print(point)
for x in point:
    print(x)
for x in point.items():
    print(x)
for key, value in point.items():
    print(key, value)


values = {x: x*2 for x in range(5)}
print(values)
for x in values:
    print(x)


from sys import getsizeof
values = (x*2 for x in range(1000000))
print("Gen:", getsizeof(values))
print(values)
for x in values:
    print(x)
values = [x*2 for x in range(1000000)]
print("List:", getsizeof(values))


values = [*range(10), *"Hello"]
print(values)
first = [1, 2]
second = [3, 4]
combined = [*first, "a", *second, *"Hello World"]
print(combined)


try:
    age = int(input("Age: "))
except ValueError as ex:
    print("You didn't enter a valid age.")
    print(ex)
    print(type(ex))
else:
    print("No expection were thrown.")
print("Execution continues.")


try:
    age = int(input("Age: "))
    xfactor = 10/age
except (ValueError, ZeroDivisionError):
    print("You didn't enter a valid age.")
else:
    print("No expection were thrown.")
print("Execution continues.")


try:
    file = open("app.py")
    age = int(input("Age: "))
    xfactor = 10/age
except (ValueError, ZeroDivisionError):
    print("You didn't enter a valid age.")
else:
    print("No expection were thrown.")
finally:
    file.close()


try:
    with open("app.py") as file: #With function doesn't need close() method, because at the end of the execution it releases the resource.
        print("File Opened.")
    age = int(input("Age: "))
    xfactor = 10/age
except (ValueError, ZeroDivisionError):
    print("You didn't enter a valid age.")
else:
    print("No expection were thrown.")

def calculate_xfactor(age):
    if age <= 0:
        raise ValueError("Age can't be 0 or less.")
    return 10/age
try:
    calculate_xfactor(-1)
except ValueError as error:
    print(error)


from timeit import timeit
code1 = """
def calculate_xfactor(age):
    if age <= 0:
        raise ValueError("Age can't be 0 or less.")
    return 10/age
try:
    calculate_xfactor(-1)
except ValueError as error:
    print(error)
"""
print("Fist Code=", timeit(code1, number=10000))


from timeit import timeit
code1 = """
def calculate_xfactor(age):
    if age <= 0:
        raise ValueError("Age can't be 0 or less.")
    return 10/age
try:
    calculate_xfactor(-1)
except ValueError as error:
    pass
"""
code2 = """
def calculate_xfactor(age):
    if age <= 0:
        return None
    return 10/age
xfactor = calculate_xfactor(-1)
if xfactor == None:
    pass
"""
print("Fist Code=", timeit(code1, number=10000))
print("Second Code=", timeit(code2, number=10000))


class Point:
    def draw(self):
        print("Draw.")
point = Point()
print(type(point))
print(isinstance(point, Point))


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def draw(self):
        print("Draw:")
        print(f"Point ({self.x}, {self.y})")
point = Point(1, 2)
print(point.x)
point.draw()


class Point:
    default_color = "red"
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def draw(self):
        print("Draw:")
        print(f"Point ({self.x}, {self.y})")
Point.default_color = "yellow"
point = Point(1, 2)
print(point.default_color)
print(Point.default_color)
# point.z = 10
point.draw()
another = Point(3, 4)
print(another.default_color)
another.draw()


class Point:
    default_color = "red"
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
    def draw(self):
        print("Draw:")
        print(f"Point ({self.x}, {self.y}, {self.z})")
Point.default_color = "yellow"
point = Point(1, 2, 30)
print(point.default_color)
print(Point.default_color)
Point.z = 10
point.draw()
another = Point(3, 4, 40)
print(another.default_color)
another.draw()


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    @classmethod
    def zero(cls):
        return cls(0, 0)
    def draw(self):
        print("Draw:")
        print(f"Point ({self.x}, {self.y})")
point = Point.zero()
point.draw()


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __str__(self):
        return f"({self.x}, {self.y})"
    def draw(self):
        print("Draw:")
        print(f"Point ({self.x}, {self.y})")
point = Point(1, 2)
print(point)
print(str(point))


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    def __gt__(self, other):
        return self.x > other.x and self.y > other.y
point = Point(1, 2)
other = Point(1, 2)
print(point == other)
point = Point(10, 20)
other = Point(1, 2)
print(point > other)
print(point < other)


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)
point = Point(10, 20)
other = Point(1, 2)
combined = point + other
print(combined.x)
print(combined.y)
print(combined)
print(combined.x, combined.y)


class TagCloud:
    def __init__(self):
        self.tags = {}
    def add(self, tag):
        self.tags[tag.lower()] = self.tags.get(tag, 0)+1
    def __getitem__(self, tag):
        return self.tags.get(tag, 0)
    def __setitem__(self, tag, count):
        self.tags[tag.lower()] = count
    def __len__(self):
        return len(self.tags)
    def __iter__(self):
        return iter(self.tags)
cloud = TagCloud()
cloud["python"] = 10
cloud.add("Python")
cloud.add("python")
cloud.add("python")
print(cloud.tags)
print(len(cloud.tags))



class TagCloud:
    def __init__(self):
        self.__tags = {}

    def add(self, tag):
        self.__tags[tag.lower()] = self.__tags.get(tag, 0)+1

    def __getitem__(self, tag):
        return self.__tags.get(tag, 0)

    def __setitem__(self, tag, count):
        self.__tags[tag.lower()] = count

    def __len__(self):
        return len(self.__tags)

    def __iter__(self):
        return iter(self.__tags)
cloud = TagCloud()
print(cloud.__dict__)
print(cloud._TagCloud__tags)



class Product:
    def __init__(self, price):
        self.price = price

    @property
    def price(self):
        return self.__price

    @price.setter
    def price(self, value):
        if value < 0:
            raise ValueError("Price can't be negative.")
        self.__price = value

product = Product(10)
product.price = 2
print(product.price)


class Animal:
    def __init__(self):
        self.age = 1
    def eat(self):
        print("Eat.")
class Mammal(Animal):
    def walk(self):
        print("Walk.")
class Fish(Animal):
    def swim(self):
        print("swim.")
mammal = Mammal()
mammal.eat()
print(mammal.age)
print(isinstance(mammal, Animal))
print(issubclass(Mammal, object))


class Animal:
    def eat(self):
        print("Eat.")
class Bird(Animal):
    def fly(self):
        print("Fly.")
class Chicken(Bird):
    pass
ch = Chicken()
ch.eat()
ch.fly()


class Employee:
    def greet(self):
        print("Employee Greet.")
class Person:
    def greet(self):
        print("Person Greet.")
class Manager(Employee, Person):
    pass
manager = Manager()
manager.greet()


class InvalidOperationError(Exception):
    pass


class Stream:
    def __init__(self):
        self.opened = False
    def open(self):
        if self.opened:
            raise InvalidOperationError("File is already opened.")
        self.open = True
    def close(self):
        if not self.opened:
            raise InvalidOperationError("File is already closed.")
        self.open = False
class FileStream(Stream):
    def read(self):
        print("Reading data from a file.")
class NetworkStream(Stream):
    def read(self):
        print("Reading data from a network.")
fileStream = FileStream()
fileStream.read()


from abc import ABC, abstractmethod
class InvalidOperationError(Exception):
    pass
class Stream(ABC):
    def __init__(self):
        self.opened = False
    def open(self):
        if self.opened:
            raise InvalidOperationError("File is already opened.")
        self.open = True
    def close(self):
        if not self.opened:
            raise InvalidOperationError("File is already closed.")
        self.open = False
    @abstractmethod
    def read(self):
        pass
class FileStream(Stream):
    def read(self):
        print("Reading data from a file.")
class NetworkStream(Stream):
    def read(self):
        print("Reading data from a network.")
class MemoryStream(Stream):
    def read(self):
        print("Reading data from a memory stream.")
stream = MemoryStream()
stream.read()


from abc import ABC, abstractmethod
@abstractmethod
class UIControl(ABC):
    def draw(self):
        pass
class TextBook(UIControl):
    def draw(self):
        print("TextBook.")
class DropDownList(UIControl):
    def draw(self):
        print("DropDownList.")
def draw(controls):
    for control in controls:
        control.draw()
textbook = TextBook()
ddl = DropDownList()
draw([textbook, ddl])
print(isinstance(ddl, UIControl))


from abc import ABC, abstractmethod
class TextBook:
    def draw(self):
        print("TextBook.")
class DropDownList:
    def draw(self):
        print("DropDownList.")
def draw(controls):
    for control in controls:
        control.draw()
textbook = TextBook()
ddl = DropDownList()
draw([textbook, ddl])


class Text(str):
    def duplicate(self):
        return self+self  # f"{self} {self}"
class TrackableList(list):
    def append(self, object):
        print("Append called")
        super().append(object)
text = Text("Python")
print(text.duplicate())
print(text.lower())
list = TrackableList()
list.append("1")
list.append("2")
print(list)


from collections import namedtuple
Point = namedtuple("Point", ["x", "y"])
p1 = Point(x=1, y=2)
p1 = Point(x=10, y=2)
p2 = Point(x=1, y=2)
print(p1.x)
print(p1 == p2)



#sales
def calc_tax(self):
    pass
def calc_shipping(self):
    pass
#app
from sales import calc_shipping, calc_tax
calc_shipping()
import sales
sales.calc_tax()


import ecommerce.shopping.sales
import sys
print(sys.path)


from ecommerce.shopping import sales
sales.calc_tax()


from ecommerce.customer import contact
from ..customer import contact


from ecommerce.shopping import sales
# print(dir(sales))
print(sales.__name__)
print(sales.__package__)
print(sales.__file__)


#__init__ -> ecommerce
print("Ecommerce initialized.")
#sales
print("Sales initialized")
def calc_tax(self):
    pass
def calc_shipping(self):
    pass
#app
from ecommerce.shopping import sales


#__init__ -> ecommerce
print("Ecommerce initialized.")
#sales
rint("Sales initialized", __name__)
def calc_tax(self):
    pass
def calc_shipping(self):
    pass
#app
from ecommerce.shopping import sales


def replace_commas(s):
    result = s.replace(',', '.')
    print(result)
s = input("Enter a string: ")
replace_commas(s)


s = "Hello"
prefix = "He"
print(s.startswith(prefix))



s = input("Enter a string: ")
suffix = input("Enter a suffix: ")
if len(suffix) > len(s):
    print(False)
else:
    if s.endswith(suffix):
        print(True)
    else:
        print(False)



def reverse_and_swapcase(s):
    words = s.split()
    new_s = ""
    for word in words:
        new_word = word[::-1].swapcase()
        new_s += new_word + " "
    return new_s.rstrip()
s = input("Enter a string: ")
result = reverse_and_swapcase(s)
print(result)



s = "Hello"
repeated_count = 0
repeated_chars = []
for char in s:
	if (s.count(char) > 1) and (char not in repeated_chars):
		repeated_count += 1
		repeated_chars.append(char)
print(repeated_count)
if repeated_chars: # Use truthy value
	print(*sorted(repeated_chars), sep=" ") # One line, avoid loop
else:
	print(None)



my_list = [3, 4, 5, 6]
factor = 2
for i in range(len(my_list)):
	my_list[i] *= factor



my_list = [3, 4, 5, 6]
for elem in my_list:
	print(elem, end=" ")



my_list = [1, 2, 3, 4, 5]
if not my_list:
    print(None)
else:
    max_val = max(my_list)
    min_val = min(my_list)
    print(max_val, min_val)



my_list = []
if not my_list:
    print("Empty")
else:
    print("Not Empty")



def print_list_with_indices(my_list):
    if not my_list:
        print("Empty List")
    else:
        for index, element in enumerate(my_list):
            print(f"{element} {index}")
my_list = ["apple", "banana", "orange"]
print_list_with_indices(my_list)



my_list = [1, 1, 2, 3, 4, 4]
no_duplicates = list(set(my_list))
print(no_duplicates)



my_list = [1, -1, 0, 2, 2, 3]
count = 0
for elem in my_list:
	if elem > 3:
		count += 1
print(count)



listA = input("Enter the first list (comma-separated): ").split(",")
listB = input("Enter the second list (comma-separated): ").split(",")
result = list(set(listA) - set(listB))
if len(listA) == 0:
    print([])
elif set(listA) == set(listB):
    print([])
else:
    print(result)



import math

def distance(point1, point2):
    """Calculates the distance between two 3D points."""
    x1, y1, z1 = point1
    x2, y2, z2 = point2
    dx = x2 - x1
    dy = y2 - y1
    dz = z2 - z1
    return math.sqrt(dx*dx + dy*dy + dz*dz)
# Example usage
point1 = [1, 2, 3]
point2 = [4, 5, 6]
dist = distance(point1, point2)
print(dist)



def find_common_elements(listA, listB):
    """
    Returns a list with the elements that listA and listB have in common.
    """
    common_elements = [elem for elem in listA if elem in listB]
    return common_elements
# Get input from user
listA = input("Enter elements of listA separated by a space: ").split()
listB = input("Enter elements of listB separated by a space: ").split()
# Find common elements
common_elements = find_common_elements(listA, listB)
# Print the result
if len(common_elements) == 0:
    print("[]")
else:
    print(common_elements)


my_list = [1, 2, 3, 4]
if len(my_list) > 1:
	no_duplicates = set(my_list)
	no_duplicates.remove(max(no_duplicates))
	print(max(no_duplicates)) 
else:
	print(None)



my_list = [1, 2, 3, 4]
if len(my_list) > 1:
	sorted_list = sorted(my_list)
	print(sorted_list[1])
else:
	print(None)



def count_frequency(lst):
    """
    Takes a list as input and returns a dictionary that maps each element in the list
    to its corresponding frequency (how many times it occurs in the list).
    """
    return {i: lst.count(i) for i in lst}

# Example usage
my_list = ["apple", "banana", "orange", "apple", "orange", "banana", "banana", "pear"]
freq_dict = count_frequency(my_list)
print(freq_dict)



def flatten_list(nested_list):
    flattened_list = []
    for element in nested_list:
        if isinstance(element, list):
            flattened_list.extend(flatten_list(element))
        elif isinstance(element, (tuple, set)):
            flattened_list.extend(list(element))
        else:
            flattened_list.append(element)
    return flattened_list

# Example usage
my_list = [1, 2, [3, 4, [5, 6], 7], 8, (9, 10)]
flattened = flatten_list(my_list)
print(flattened)



def get_permutations(lst):
    if len(lst) == 0:
        return [[]]
    else:
        permutations = []
        for i in range(len(lst)):
            remaining_elements = lst[:i] + lst[i+1:]
            for permutation in get_permutations(remaining_elements):
                permutations.append([lst[i]] + permutation)
        return permutations
my_list = [1, 2, 3]
permutations = get_permutations(my_list)
for permutation in permutations:
    print(permutation)



my_dict = {'a': 1, 'b': 2, 'c': 3}
key = 'b'
if key in my_dict:
    print(True)
else:
    print(False)



def merge_dicts(dict1, dict2):
    """
    Merges two dictionaries and returns the resulting dictionary.
    """
    merged_dict = dict1.copy()
    merged_dict.update(dict2)
    return merged_dict
# Example usage
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}
merged_dict = merge_dicts(dict1, dict2)
print(merged_dict)



my_dict = {'key1': 10, 'key2': 10, 'key3': 10}
if not my_dict:
    print("Empty")
elif len(set(my_dict.values())) == 1:
    print(True)
else:
    print(False)



def find_largest_value(my_dict):
    if not my_dict:
        return None
    else:
        largest_value = max(my_dict.values())
        return largest_value
# Example input variable
my_dict = {'a': 3, 'b': 7, 'c': 5}
# Call the function with the input variable
largest_value = find_largest_value(my_dict)
# Print the output
print("The largest value in the dictionary is:", largest_value)



def find_smallest_value(my_dict):
    if not my_dict:
        return None
    else:
        smallest_value = min(my_dict.values())
        return smallest_value
# Example usage
my_dict = {'a': 3, 'b': 7, 'c': 5}
smallest_value = find_smallest_value(my_dict)
if smallest_value is None:
    print("The dictionary is empty!")
else:
    print("The smallest value in the dictionary is:", smallest_value)



def count_values(d):
    if not d:
        return {}  # empty dictionary
    freq = {}
    for value in d.values():
        freq[value] = freq.get(value, 0) + 1
    return freq
d = {'a': 1, 'b': 2, 'c': 1, 'd': 3, 'e': 2}
freq = count_values(d)
print(freq)  # {'a': 2, 'b': 2, 'c': 2, 'd': 1, 'e': 1}



nested_lists = [[1, 'apple'], [2, 'banana'], [3, 'cherry']]
my_dict = {}
for nested_list in nested_lists:
    key = nested_list[0]
    value = nested_list[1]
    my_dict[key] = value
print(my_dict)



my_dict = {"apple": [2, 3, 1], "banana": (3, 2, 4), "orange": [1, 5, 2, 3]}
largest_value = None
for value in my_dict.values():
    if largest_value is None or max(value) > largest_value:
        largest_value = max(value)
print(largest_value)



num = float(input("Enter a number: "))
if num > 0:
    print("The number is Positive")
elif num < 0:
    print("The number is Negative")
else:
    print("The number is Zero")
