Here are all the resources I mentioned in the video: https://www.youtube.com/watch?v=79pKwdiqcwI&t=446s
1. Learn Python: https://www.learnpython.org/
2. Build Python Projects: https://www.youtube.com/watch?v=8ext9...
3. Download VS code here: https://code.visualstudio.com/
4. Data Structures and Algorithms: https://www.udacity.com/course/data-s...
5. Leetcode: https://leetcode.com/



first = "Aotmick"
last = "Hassan"
message = f"{first} [{last}]

--------------------------------------------------
secret_number = 9
guess_count = 0
guess_limit = 3
while guess_count < guess_limit:
    guess = int(input("Guess: "))
    guess_count += 1
    if guess == secret_number:
        print("You have Won!")
        break
else:
    print("Sorry, You have failed!")
----------------------------------------------------
# Car Game 

command = ""
started = False
while True:
    command = input("> ").lower()
    if command == "start":
        if started:
            print("Car has already started.")

        else:
            started = True
            print("Car has Started...Ready to GO!!")

    elif command == "stop":
        if not started:
            print("Car has already stopped.")
        else:
            started = False
            print("Car has stopped")

    elif command == "help":
        print("""
start - to start the car
stop - to stop the car
quit - to exit the game
        """)
    elif command == "quit":
        break

    else:
        print("Sorry, I don't understand that.")
----------------------------------------------------------
prices = [10, 20, 30]
total = 0
for price in prices:
    total += price
print(f"Total: ${total}")
------------------------------------------------------------
#Weight Converter

weight = float(input("Weight: "))
unit = input("(L)bs or (K)gs: ")
if unit.upper() == "K":
    print(f"You are {weight / .45} pounds")
else:
    print(f"You are {weight * .45} kilos")


weight = int(input("Weight: "))
unit = input("(K)gs or (L)bs: ")
if unit.upper() == "K":
    converted = weight / .45
    print("Weight in Lbs: "+str(converted))
else:
    converted = weight * .45
    print("Weight in Kgs: "+str(converted))
--------------------------------------------------------------
numbers = [2, 5, 2, 7, 5, 10, 10, 13, 15, 13]
uniques = []

for number in numbers:
    if number not in uniques:
        uniques.append(number)
print(uniques)
------------------------------------------------------------
phone = input("Phone: ")
digits = {
    "1": "One",
    "2": "Two"
}
output = ""
for ch in phone:
    output += digits.get(ch, "!") + " "
print(output)
------------------------------------------------------------
message = input("> ")
words = message.split(" ")
emoji = {
        ":)": "🙂",
        ":(": "🙁"
    }
output = ""
for word in words:
    output += emoji.get(word, word) + " "
print(output)
----------------------------------------------------------------
def greet_user(first_name, last_name):
    print(f"Hi {first_name} {last_name}!")
    print("Welcome Aboard!")


print("Start")
greet_user("Aotmick", "Hassan")
print("Finished")
-------------------------------------------------------------------

numbers = [5, 2, 5, 2, 2]

for x_count in numbers:
    output = ""
    for count in range(x_count):
        output += "x"
    print(output)
-------------------------------------------------------------
numbers = [10, 26, 15, 32, 100]
max = numbers[0]
for number in numbers:
    if number > max:
        max = number
print(max)
---------------------------------------------------------------
#Exception:

try:
    age = int(input("Age: "))
    income = 20000
    risk = income / age
    print(age)
except ValueError:
    print("Inavlid value")
except ZeroDivisionError:
    print("Age can't be 0!")
--------------------------------------------------------------------
# Class

class Point:
    def move(self):
        print("move")

    def draw(self):
        print("draw")


point1 = Point()
point1.draw()
point1.move()
point1.x = 10
point1.y = 20
print(point1.x)
----------------------------------------------------------------------
#Construction:

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def move(self):
        print("move")

    def draw(self):
        print("draw")


point1 = Point(100, 200)
point1.draw()
point1.move()
point1.x = 113
point1.y = 2001
print(point1.x)
print(point1.y)
-----------------------------------------------------------------------------
#Inheritance

class Mammal:
    def walk(self):
        print("Walk!")


class Dog(Mammal):
    def bark(self):
        print("bark")

class Cat(Mammal):
    def meow(self):
        print("Meow")

cat1 = Cat()
cat1.walk()
cat1.meow()

dog1 = Dog()
dog1.walk()
-------------------------------------------------------------------------------
# max function

def find_max(numbers):
    maximum = numbers[0]
    for number in numbers:
        if number > maximum:
            maximum = number
    return maximum


from utils import find_max
numbers = [10, 26, 15, 32, 100]
maximum = find_max(numbers)
print(maximum)
---------------------------------------------------------------------------------
from pathlib import Path

path = Path()
# print(path.glob("*.*"))
for file in path.glob("*"):
    print(file)

# path1 = Path("ecommerce1")
# print(path1.exists())
---------------------------------------------------------------------------
#Random Dice Rolling

import random

class Dice:
    def roll(self):
        first = random.randint(1, 6)
        second = random.randint(1, 6)
        return first, second

dice = Dice()
print(dice.roll())
------------------------------------------------------------------------------
#automating excel using openpyxl

import openpyxl as xl
from openpyxl.chart import BarChart, Reference


def process_workbook(filename):
    wb = xl.load_workbook(filename)
    sheet = wb["Sheet1"]

    for row in range(2, sheet.max_row + 1):
        cell = sheet.cell(row, 3)
        corrected_price = cell.value * .9
        corrected_price_cell = sheet.cell(row, 4)
        corrected_price_cell.value = corrected_price

    values = Reference(sheet,
              min_row=2,
              max_row=sheet.max_row,
              min_col=4,
              max_col=4)

    chart = BarChart()
    chart.add_data(values)
    sheet.add_chart(chart, "e2")

    wb.save(filename)
-------------------------------------------------------------------------------------
age = int(input("> "))
message = "Eligible" if age >= 18 else "Not eligible"
print(message)
-------------------------------------------------------------------------------------------
high_income = True
good_credit = True
student = True
if (high_income or good_credit) and not student:
    print("Eligible")
else:
    print("Not Eligible")
--------------------------------------------------------------------------

