#2.12. Solution Remove Characters at Even Indices:
def remove_even_indices(s):
    if len(s) <= 1:
        print(s)
    else:
        result = ''
        for i in range(len(s)):
            if i % 2 == 1:
                result += s[i]
        print(result)

s = input("Enter a string: ")
remove_even_indices(s)



2.14. Solution Check if a String Only Contains Numbers
def is_string_numeric(s):
    if s.isdigit() or (len(s) == 2 and s[0] in ('+', '-') and s[1].isdigit()):
        print(True)
    else:
        print(False)

s = input("Enter a string: ")
is_string_numeric(s)




2.16. Solution Remove nth Character from a String
def remove_char_at_index(s, n):
    if len(s) == 0:      / # if len(s) <= 1:
        print(s)
    elif n >= len(s) or n < 0:
        print(s)
    else:
        result = s[:n] + s[n + 1:]     / #
        print(result)

s = input("Enter a string: ")
n = int(input("Enter an index: "))
remove_char_at_index(s, n)




2.18. Solution Replace a Character in a String
def replace_char(s, curr_char, new_char):
    if curr_char in s:
        result = s.replace(curr_char, new_char)
        print(result)
    else:
        print(s)

s = input("Enter a string: ")
curr_char = input("Enter current character: ")
new_char = input("Enter new character: ")
replace_char(s, curr_char, new_char)




3.10. Solution Check if a String Ends with a Suffix
s = "example string"
suffix = "ing"

if len(suffix) > len(s):
    print(False)
else:
    if s[-len(suffix):] == suffix:
        print(True)
    else:
        print(False)

s = input("Enter a string: ")
suffix = input("Enter a suffix: ")

if len(suffix) > len(s):
    print(False)
else:
    if s.endswith(suffix):
        print(True)
    else:
        print(False)





3.13. Solution Reverse Words in a String () 
def reverse_and_swapcase(s):
    words = s.split()
    new_s = ""
    for word in words:
        new_word = word[::-1].swapcase()
        new_s += new_word + " "
    return new_s.rstrip()

s = input("Enter a string: ")
result = reverse_and_swapcase(s)
print(result)


s = "Hello World"
words = s.split()
new_s = ""

for word in words:
    new_word = word[::-1].swapcase()
    new_s += new_word + " "

print(new_s.rstrip())





3.15. Solution Count Repeated Characters ()
def count_repeated_chars(s):
    repeated_chars = sorted(list(set([char for char in s if s.count(char) > 1])))
    if not repeated_chars:
        return 0, None
    return len(repeated_chars), " ".join(repeated_chars)

input_str = input("Enter a string: ")
repeated_count, repeated_chars = count_repeated_chars(input_str)
print(repeated_count)
print(repeated_chars)


s = input("Enter a string: ")
count = 0
repeated_chars = []

for char in set(s):
    if s.count(char) > 1:
        count += 1
        repeated_chars.append(char)

if count == 0:
    print("0\nNone")
else:
    repeated_chars.sort()
    print(count)
    print(" ".join(repeated_chars))




4.3. Solution Multiply all Elements in a List
def multiply_list(lst, factor):
    result = []
    for item in lst:
        if isinstance(item, str):
            result.append(item * factor)
        else:
            result.append(item * factor)
    return result

input_list = input("Enter a list of numbers or strings separated by spaces: ").split()
factor = int(input("Enter a positive integer factor: "))

# convert input list to integers if possible
try:
    input_list = [int(x) for x in input_list]
except ValueError:
    pass

result = multiply_list(input_list, factor)
print(result)


def multiply_list(lst, factor):
    result = []
    for item in lst:
        if isinstance(item, str):
            result.append(item * factor)
        else:
            result.append(item * factor)
    return result

my_list = [1, 2, 3, 4, 5]
factor = 3
result = multiply_list(my_list, factor)
print(result)

my_list = ['a', 'b', 'c']
factor = 4
result = multiply_list(my_list, factor)
print(result)



4.5. Solution Print Elements on the Same Line Without Commas
my_list = [1, 2, 3, 4, 5]
for item in my_list:
    print(item, end=' ')
# Output: 1 2 3 4 5


lst = input("Enter a list of integers separated by spaces: ").split()
lst = [int(x) for x in lst]
print(' '.join(str(x) for x in lst))


my_list = [1, 2, 3, 4, 5]
# Convert all elements of the list to strings
my_list_str = [str(x) for x in my_list]
# Use join() method to join elements of the list into a string separated by spaces
result_str = ' '.join(my_list_str)
print(result_str)
# Output: 1 2 3 4 5



4.7. Solution Get Max and Min Values
def find_max_min(my_list):
    if not my_list:
        return None
    else:
        max_val = max(my_list)
        min_val = min(my_list)
        return (max_val, min_val)

user_input = input("Enter a list of numbers separated by spaces: ")
my_list = [float(x) for x in user_input.split()]

result = find_max_min(my_list)
if result:
    max_val, min_val = result
    print("Largest value:", max_val)
    print("Smallest value:", min_val)
else:
    print("The list is empty.")


my_list = [1, 2, 3, 4, 5]

if not my_list:
    print(None)
else:
    max_val = max(my_list)
    min_val = min(my_list)
    print(max_val, min_val)





4.9. Solution Check if List is Empty or Not
def is_empty(my_list):
    return not bool(my_list)

user_input = input("Enter a list of values separated by spaces: ")
my_list = user_input.split()

if is_empty(my_list):
    print("Empty")
else:
    print("Not Empty")


my_list = []

if not my_list:
    print("Empty")
else:
    print("Not Empty")






4.12. Solution Print the Elements and Their Indices
def print_list_with_indices(my_list):
    if not my_list:
        print("Empty List")
    else:
        for index, element in enumerate(my_list):
            print(f"{element} {index}")

# Prompt the user to enter a list of items separated by commas
user_input = input("Enter a list of items separated by commas: ")

# Split the user input into a list
my_list = user_input.split(",")

# Remove any leading or trailing spaces from the list elements
my_list = [item.strip() for item in my_list]

# Call the print_list_with_indices function with the user input list
print_list_with_indices(my_list)



def print_list_with_indices(my_list):
    if not my_list:
        print("Empty List")
    else:
        for index, element in enumerate(my_list):
            print(f"{element} {index}")

my_list = ["apple", "banana", "orange"]
print_list_with_indices(my_list)




4.16. Solution Remove Duplicates from a List
def remove_duplicates(my_list):
    seen = set()
    i = 0

    while i < len(my_list):
        if my_list[i] in seen:
            del my_list[i]
        else:
            seen.add(my_list[i])
            i += 1

    return my_list

# Example usage:
input_list = input("Enter a list of values separated by commas: ")
my_list = [int(x) for x in input_list.split(",")]
result = remove_duplicates(my_list)
print(result)


my_list = [1, 2, 2, 3, 4, 4, 5]
seen = set()
i = 0

while i < len(my_list):
    if my_list[i] in seen:
        del my_list[i]
    else:
        seen.add(my_list[i])
        i += 1

print(my_list)







4.18. Solution Count Elements Greater than 3
def count_greater_than(my_list, threshold):
    return len([x for x in my_list if x > threshold])

# Example usage:
input_list = input("Enter a list of values separated by commas: ")
threshold = int(input("Enter the threshold value: "))
my_list = [int(x) for x in input_list.split(",")]
count = count_greater_than(my_list, threshold)
print(count)



my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
count = 0

for x in my_list:
    if x > 3:
        count += 1

print(count)





5.2. Solution Difference Between Two Lists
listA = input("Enter the first list (comma-separated): ").split(",")
listB = input("Enter the second list (comma-separated): ").split(",")

result = [x for x in listA if x not in listB]

if len(listA) == 0:
    print([])
elif set(listA) == set(listB):
    print([])
else:
    print(result)



listA = input("Enter the first list (comma-separated): ").split(",")
listB = input("Enter the second list (comma-separated): ").split(",")

result = list(set(listA) - set(listB))
result = [x for x in listA if x not in listB]result = [x for x in listA if x not in listB]

if len(listA) == 0:
    print([])
elif set(listA) == set(listB):
    print([])
else:
    print(result)





5.4. Solution Distance Between Two 3D Points
import math

def distance(point1, point2):
    """Calculates the distance between two 3D points."""
    dx, dy, dz = [p2 - p1 for p1, p2 in zip(point1, point2)]
    return math.sqrt(dx**2 + dy**2 + dz**2)

# Example usage
point1 = list(map(int, input("Enter the coordinates of point1 (separated by spaces): ").split()))
point2 = list(map(int, input("Enter the coordinates of point2 (separated by spaces): ").split()))
dist = distance(point1, point2)
print("The distance between", point1, "and", point2, "is", dist)



import math
def distance(point1, point2):
    """Calculates the distance between two 3D points."""
    x1, y1, z1 = point1
    x2, y2, z2 = point2
    dx = x2 - x1
    dy = y2 - y1
    dz = z2 - z1
    return math.sqrt(dx*dx + dy*dy + dz*dz)

# Example usage
point1 = [1, 2, 3]
point2 = [4, 5, 6]
dist = distance(point1, point2)
print(dist)




5.6. Solution Print Common Elements in Two Lists
def find_common_elements(listA, listB):
    """
    Returns a list with the elements that listA and listB have in common.
    """
    common_elements = [elem for elem in listA if elem in listB]
    return common_elements

# Get input from user
listA = input("Enter elements of listA separated by a space: ").split()
listB = input("Enter elements of listB separated by a space: ").split()

# Find common elements
common_elements = find_common_elements(listA, listB)

# Print the result
if len(common_elements) == 0:
    print("[]")
else:
    print(common_elements)



listA = input("Enter the first list: ").split()
listB = input("Enter the second list: ").split()

common_elements = [x for x in listA if x in listB]

print(common_elements)




5.8. Solution Find the Second Largest Value in a List
def find_second_largest(listA):
    if len(listA) < 2:
        return None
    else:
        sorted_list = sorted(listA, reverse=True)
        return sorted_list[1]

# Example usage
input_list = input("Enter a list of integers separated by spaces: ").split()
input_list = [int(num) for num in input_list]  # Convert string input to integer list
second_largest = find_second_largest(input_list)
if second_largest is not None:
    print("The second largest value in the list is:", second_largest)
else:
    print("The list is empty or only has one element.")



my_list = input("Enter a list of numbers separated by space: ").split()
my_list = [int(x) for x in my_list]  # Convert list of strings to list of integers

if len(my_list) <= 1:
    print(None)
else:
    # Remove duplicates and sort the list in descending order
    sorted_list = sorted(set(my_list), reverse=True)
    print(sorted_list[1])  # Print the second largest element in the list







4.11. Solution Find the Second Smallest Value in a List
def second_smallest(lst):
    if len(lst) < 2:
        return None
    sorted_lst = sorted(lst)
    return sorted_lst[1]

# Get input from user
lst = input("Enter a list of numbers separated by spaces: ").split()
lst = [int(num) for num in lst]

# Call function and print result
result = second_smallest(lst)
if result is None:
    print(result)
else:
    print("The second smallest value in the list is:", result)



def second_smallest(lst):
    if len(lst) < 2:
        return None
    else:
        sorted_list = sorted(lst)
        return sorted_list[1]

input_list = input("Enter a list of numbers separated by spaces: ").split()
input_list = [int(i) for i in input_list]
print("The second smallest value is:", second_smallest(input_list))



my_list = [3, 5, 2, 8, 6, 5, 2, 9, 1, 7, 4, 8, 5, 6, 2, 1, 9, 7, 3, 4]

unique_list = sorted(set(my_list))
if len(unique_list) >= 4:
    fourth_min_value = unique_list[3]
    print(fourth_min_value)
else:
    print(None)



5.13. Solution Make a Frequency Dictionary from the Elements of a List ()
my_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]

freq_dict = {}
for item in my_list:
    if item in freq_dict:
        freq_dict[item] += 1
    else:
        freq_dict[item] = 1

print(freq_dict)


def count_frequency(lst):
    """
    Takes a list as input and returns a dictionary that maps each element in the list
    to its corresponding frequency (how many times it occurs in the list).
    """
    return {i: lst.count(i) for i in lst}

# Example usage
my_list = ["apple", "banana", "orange", "apple", "orange", "banana", "banana", "pear"]
freq_dict = count_frequency(my_list)
print(freq_dict)




5.15. Solution Flatten a List that Contains Lists ()
def flatten_list(nested_list):
    flattened_list = []
    for element in nested_list:
        if isinstance(element, list):
            flattened_list.extend(flatten_list(element))
        elif isinstance(element, (tuple, set)):
            flattened_list.extend(list(element))
        else:
            flattened_list.append(element)
    return flattened_list

# Example usage
my_list = [1, 2, [3, 4, [5, 6], 7], 8, (9, 10)]
flattened = flatten_list(my_list)
print(flattened)


def flatten(lst):
    return [item for sublist in lst for item in (flatten(sublist) if isinstance(sublist, list) else [sublist])]

input_list = eval(input("Enter a list with nested lists: "))

print(flatten(input_list))




5.17. Solution Generate all Permutations of a List ()
def get_permutations(lst):
    if len(lst) == 0:
        return [[]]
    else:
        permutations = []
        for i in range(len(lst)):
            remaining_elements = lst[:i] + lst[i+1:]
            for permutation in get_permutations(remaining_elements):
                permutations.append([lst[i]] + permutation)
        return permutations

# Example usage:
my_list = [1, 2, 3]
permutations = get_permutations(my_list)
for permutation in permutations:
    print(permutation)


import itertools

lst = [1, 2, 3]

for perm in itertools.permutations(lst):
    print(list(perm))





6.3. Solution Check if a Key Exists in a Dictionary
def check_key_exists(dictionary, key):
    """
    This function takes a dictionary and a key and checks if the key exists in the dictionary or not.
    """
    if key in dictionary:
        return True
    else:
        return False

# Take user input for the dictionary and key
dictionary = eval(input("Enter a dictionary: "))
key = input("Enter a key: ")

# Call the check_key_exists function and print the output
if check_key_exists(dictionary, key):
    print("True")
else:
    print("False")


my_dict = {"a": 1, "b": 2, "c": 3} # sample dictionary
key = "b" # sample key to check

if key in my_dict:
    print(True)
else:
    print(False)






6.5. Solution Add a Key-Value Pair Only if the Key is Not in the Dictionary
def add_to_dict_if_new(my_dict, new_key, new_value):
    if new_key not in my_dict:
        my_dict[new_key] = new_value
    return my_dict

# Define a dictionary
my_dict = {"apple": 2, "banana": 3, "orange": 1}

# Prompt the user to enter a new key-value pair
new_key = input("Enter a new key: ")
new_value = input("Enter a new value: ")

# Call the add_to_dict_if_new function with the dictionary and new key-value pair
updated_dict = add_to_dict_if_new(my_dict, new_key, new_value)

# Print the final value of the dictionary
print(updated_dict)


my_dict = {"apple": 2, "banana": 3, "orange": 1}
new_key = "grape"
new_value = 4

if new_key not in my_dict:
    my_dict[new_key] = new_value

print(my_dict)






6.7. Solution Merge Two Dictionaries
def merge_dicts(d1, d2):
    merged_dict = d1.copy()
    merged_dict.update(d2)
    return merged_dict

dict1 = eval(input("Enter the first dictionary: "))
dict2 = eval(input("Enter the second dictionary: "))

merged_dict = merge_dicts(dict1, dict2)

print("Merged dictionary:", merged_dict)



def merge_dicts(dict1, dict2):
    """
    Merges two dictionaries and returns the resulting dictionary.
    """
    merged_dict = dict1.copy()
    merged_dict.update(dict2)
    return merged_dict

# Example usage
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}
merged_dict = merge_dicts(dict1, dict2)
print(merged_dict)


def merge_dicts(dict1, dict2):
    return {**dict1, **dict2}

dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'d': 4, 'e': 5, 'f': 6}

merged_dict = merge_dicts(dict1, dict2)
print(merged_dict)


# take input dictionaries from user
dict1 = eval(input("Enter the first dictionary: "))
dict2 = eval(input("Enter the second dictionary: "))

# merge the dictionaries
merged_dict = {**dict1, **dict2}

# print the merged dictionary
print("Merged dictionary:", merged_dict)




6.10. Solution Check if All Values are Equal
def all_equal(d):
    if not d:
        print("Empty")
    else:
        values = list(d.values())
        if all(val == values[0] for val in values):
            print(True)
        else:
            print(False)

# Example usage
my_dict = {"a": 2, "b": 2, "c": 2}
all_equal(my_dict)

# Using input variable
dict_str = input("Enter a dictionary as a string in the format {key1: value1, key2: value2, ...}: ")
my_dict = eval(dict_str)
all_equal(my_dict)


def all_equal(d):
    if not d:
        print("Empty")
    else:
        values = list(d.values())
        if all(val == values[0] for val in values):
            print(True)
        else:
            print(False)

# Example usage
my_dict = {"a": 2, "b": 2, "c": 2}
all_equal(my_dict)

# Using input variable
dict_str = input("Enter a dictionary as a string in the format {key1: value1, key2: value2, ...}: ")
my_dict = eval(dict_str)
all_equal(my_dict)


my_dict = {'key1': 10, 'key2': 10, 'key3': 10}
if not my_dict:
    print("Empty")
elif len(set(my_dict.values())) == 1:
    print(True)
else:
    print(False)



6.12. Solution Find the Maximum Value in a Dictionary
def find_largest_value(my_dict):
    if not my_dict:
        return None
    else:
        largest_value = max(my_dict.values())
        return largest_value

# Take user input for the dictionary
my_dict = {}
num_elements = int(input("Enter the number of elements in the dictionary: "))
for i in range(num_elements):
    key = input("Enter the key: ")
    value = float(input("Enter the value: "))
    my_dict[key] = value

# Call the function with the user input dictionary
largest_value = find_largest_value(my_dict)

# Print the output
if largest_value is None:
    print("The dictionary is empty!")
else:
    print("The largest value in the dictionary is:", largest_value)


def find_largest_value(my_dict):
    if not my_dict:
        return None
    else:
        largest_value = max(my_dict.values())
        return largest_value

# Example input variable
my_dict = {'a': 3, 'b': 7, 'c': 5}

# Call the function with the input variable
largest_value = find_largest_value(my_dict)

# Print the output
print("The largest value in the dictionary is:", largest_value)




6.14. Solution Find the Minimum Value in a Dictionary
def find_smallest_value(my_dict):
    if not my_dict:
        return None
    else:
        smallest_value = min(my_dict.values())
        return smallest_value

# Take user input for the dictionary
my_dict = {}
num_elements = int(input("Enter the number of elements in the dictionary: "))
for i in range(num_elements):
    key = input("Enter the key: ")
    value = float(input("Enter the value: "))
    my_dict[key] = value

# Call the function with the user input dictionary
smallest_value = find_smallest_value(my_dict)

# Print the output
if smallest_value is None:
    print("The dictionary is empty!")
else:
    print("The smallest value in the dictionary is:", smallest_value)



def find_smallest_value(my_dict):
    if not my_dict:
        return None
    else:
        smallest_value = min(my_dict.values())
        return smallest_value

# Example usage
my_dict = {'a': 3, 'b': 7, 'c': 5}
smallest_value = find_smallest_value(my_dict)

if smallest_value is None:
    print("The dictionary is empty!")
else:
    print("The smallest value in the dictionary is:", smallest_value)




7.2. Solution Make a Dictionary from Nested Lists
def create_dict(nested_lists):
    my_dict = {}
    for nested_list in nested_lists:
        if len(nested_list) == 2:
            key, value = nested_list
            my_dict[key] = value
    return my_dict

# Prompt the user to enter a list of nested lists as a string
nested_lists_str = input("Enter a list of nested lists as a string: ")

# Convert the string to a list of nested lists using eval()
nested_lists = eval(nested_lists_str)

# Call the create_dict function with the nested lists
my_dict = create_dict(nested_lists)

# Print the resulting dictionary
print(my_dict)


def create_dict(nested_lists):
    my_dict = {}
    for nested_list in nested_lists:
        if len(nested_list) == 2:
            key, value = nested_list
            my_dict[key] = value
    return my_dict

# Define some nested lists
nested_lists = [["apple", 2], ["banana", 3], ["orange", 4]]

# Call the create_dict function with the nested lists
my_dict = create_dict(nested_lists)

# Print the resulting dictionary
print(my_dict)




7.4. Solution Make a Dictionary from Nested Lists
def count_values(my_dict):
    freq_dict = {}
    for value in my_dict.values():
        freq_dict[value] = freq_dict.get(value, 0) + 1
    return freq_dict

# Prompt the user to enter a dictionary as a string
my_dict_str = input("Enter a dictionary as a string: ")

# Convert the string to a dictionary using eval()
my_dict = eval(my_dict_str)

# Call the count_values function with the dictionary
freq_dict = count_values(my_dict)

# Print the frequency dictionary
print(freq_dict)



nested_lists = [[1, 'apple'], [2, 'banana'], [3, 'cherry']]

my_dict = {}

for nested_list in nested_lists:
    key = nested_list[0]
    value = nested_list[1]
    my_dict[key] = value

print(my_dict)






7.6. Solution Print the Max Sum of Values
def find_largest_value(my_dict):
    largest_value = None
    for value in my_dict.values():
        if largest_value is None or max(value) > largest_value:
            largest_value = max(value)
    return largest_value

# Prompt the user to enter a dictionary as a string
my_dict_str = input("Enter a dictionary as a string: ")

# Convert the string to a dictionary using eval()
my_dict = eval(my_dict_str)

# Call the find_largest_value function with the dictionary
largest_value = find_largest_value(my_dict)

# Print the largest value
print(largest_value)


my_dict = {"apple": [2, 3, 1], "banana": (3, 2, 4), "orange": [1, 5, 2, 3]}

largest_value = None

for value in my_dict.values():
    if largest_value is None or max(value) > largest_value:
        largest_value = max(value)

print(largest_value)




7.9. Solution Make a Frequency Dictionary for the Characters in a String ()
def char_frequency(string):
    freq_dict = {}
    for char in string.lower():
        if char.isalpha():
            freq_dict[char] = freq_dict.get(char, 0) + 1
    return freq_dict

# Prompt the user to enter a string
string = input("Enter a string: ")

# Call the char_frequency function with the string
freq_dict = char_frequency(string)

# Print the resulting dictionary
print(freq_dict)


string = "Hello, World!"

# Initialize an empty dictionary to store the letter frequencies
freq_dict = {}

# Iterate over each character in the string
for char in string.lower():
    # Check if the character is a letter
    if char.isalpha():
        # Convert the character to lowercase
        char = char.lower()
        # If the letter is already in the dictionary, increment its count
        if char in freq_dict:
            freq_dict[char] += 1
        # If the letter is not in the dictionary, add it with a count of 1
        else:
            freq_dict[char] = 1

# Print the resulting dictionary
print(freq_dict)

