#Recursion

import sys
sys.setrecursionlimit(10000)

def fac(n):
    print(n)
    return n * fac(n)

fac(3)
__________________________________
def factorioal(n):
    if n in [0, 1]:
        return 1
    else:
        return n * factorioal(n - 1)


print(factorioal(3))
--------------------------------------------------------------------------------
#Fibonacci

def fibonacci(n):
    assert n >= 0 and int(n) == n, "The number must be Integer only!"
    if n in [0, 1]:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)


print(fibonacci(4))
-------------------------------------------------------------------------------------
list = [1, 4, 7, 11, 807, 98, 17, 8, 54, 53]


def findBiggestNumber(list):
    biggestNumber = list[0]
    for i in range(1, len(list)):
        if list[i] > biggestNumber:
            biggestNumber = list[i]
    return biggestNumber

print(findBiggestNumber(list))
----------------------------------------------------------------------------------------------
from array import *

arr1 = array("i", [1, 2, 3, 5, 7, 9, 10])
arr2 = array("d", [1.2, 3.5, 7.9, 10.11])

print(arr2)

arr1.insert(4, 40)
print(arr1)

def traverseArray(array):
    for i in array:
        print(i)

traverseArray(arr1)
.............................................


#Accessing Elements in an Array
from array import *

arr1 = array("i", [1, 2, 3, 5, 7, 9, 10])
arr2 = array("d", [1.2, 3.5, 7.9, 10.11])


# print(arr2)


def accessElement(array, index):
    if index >= len(array):
        print("Doesn't Exist")
    else:
        print(array[index])


accessElement(arr1, 10)
...........................................
#Search in Array


from array import *

arr1 = array("i", [1, 2, 3, 5, 7, 9, 10])
arr2 = array("d", [1.2, 3.5, 7.9, 10.11])


def searchInArray(array, value):
    for i in array:
        if i==value:
            return array.index(value)
    return "Doesn't Exist"
print(searchInArray(arr1, 9))
----------------------------------------------------------
from array import *

# 1. Create an array and traverse.
myArray = array("i", [1, 2, 3, 4, 5, 6])
for i in myArray:
    print(i)

# 2. Access individual elements through indexes:
print("Step - 2")
print(myArray[2])

# 3. Append any value to the array using append() method:
print("Step - 3")
myArray.append(7)
print(myArray)

# 4. Insert value in an array using insert() method:
print("Step - 4")
myArray.insert(3, 11)
print(myArray)

# 5. Extend python array using extend() method
print("Step - 5")
myArray1 = array("i", [12, 13, 14])
myArray.extend(myArray1)
print(myArray)

# 6. Add items from list into array using fromlist() method:
print("Step - 6")
tempList = [21, 22, 23, 24]
myArray.fromlist(tempList)
print(myArray)

# 7. Remove any array element using remove() method
print("Step - 7")
myArray.remove(11)
print(myArray)

# 8. Remove last array element using pop() method
print("Step - 8")
myArray.pop()
print(myArray)

# 9. Fetch any element through its index using index() method
print("Step - 9")
print(myArray.index(3))

# 10. Reverse a python array using reverse() method
print("Step - 10")
myArray.reverse()
print(myArray)
myArray.reverse()
print(myArray)

# 11. Get array buffer information through buffer_info() method
print("Step - 11")
print(myArray.buffer_info())

# 12. Check for number of occurrences of an element using count() method:
print("Step - 12")
myArray.append(23)
print(myArray.count(23))
print(myArray)

# 13. Convert array to string using tostring() method
print("Step - 13")
strTemp = myArray.tobytes()
print(strTemp)
# intStr=array("i")
# intStr.frombytes(strTemp)
# print(intStr)

# 14. Convert array to a python list with same elements using tolist() method:
print("Step - 14")
print(myArray.tolist())

# 15. Append a string to char array using fromstring() method
print("Step - 15")
intStr = array("i")
intStr.frombytes(strTemp)
print(intStr)

# 16. Slice Elements from an array:
print("Step - 16")
print(myArray[3:8])
print(myArray[:7])
print(myArray[2:])
print(myArray[:])
-------------------------------------------------------------------------------------
import numpy as np

twoDimensionalArray = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(twoDimensionalArray)
twoDimensionalArray1 = np.insert(twoDimensionalArray, 0, [[10, 11, 12]], axis=1)
print(twoDimensionalArray1)
twoDimensionalArray2 = np.append(twoDimensionalArray, [[11, 23, 45]], axis=0)
print(twoDimensionalArray2)
------------------------------------------------------------------------------------
import numpy as np

twoDimensionalArray = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(twoDimensionalArray)


def accessElement(array, rowIndex, colIndex):
    if rowIndex >= len(array) or colIndex >= len(array):
        print("Invalid")
    else:
        print(array[rowIndex][colIndex])


accessElement(twoDimensionalArray, 2, 3)
--------------------------------------------------------------------------------------
import numpy as np

twoDimensionalArray = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(twoDimensionalArray)


def traverseTDArray(array):
    for i in range(len(array)):
        for j in range(len(array[0])):
            print(array[i][j])


traverseTDArray(twoDimensionalArray)
----------------------------------------------------------------------------------
import numpy as np

twoDimensionalArray = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(twoDimensionalArray)


def searchTDArray(array, value):
    for i in range(len(array)):
        for j in range(len(array[0])):
            if array[i][j] == value:
                return f"The element is in index {i} {j}"
    return "The element not found"


print(searchTDArray(twoDimensionalArray, 11))
------------------------------------------------------------------------------------
import numpy as np

twoDimensionalArray = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(twoDimensionalArray)
newTDArray = np.delete(twoDimensionalArray, 0, axis=0)
print(newTDArray)
----------------------------------------------------------------------------------
intList = [1, 2, 3, 4, 5, 6]
for i in intList:
    print(i)


shoppingList = ["Milk", "Butter", "Sugar"]

for i in range(len(shoppingList)):
    shoppingList[i] = shoppingList[i] + "+"
    print(shoppingList[i])
---------------------------------------------------------------------------------------
#List Manipulation

myList = [1, 2, 3, 4, 5]
print(myList)

myList[2] = 30
myList[4] = 60

myList.insert(1, 90)
myList.append(78)

newList = [11, 12, 23]
myList.extend(newList)
print(myList)
-------------------------------------------------------------
# List Manipulation
# Delete/Slice

myList = ["a", "b", "c", "d", "e", "f"]
print(myList)

print(myList[2:5])
print(myList[1:])
print(myList[:4])
print(myList[:])

myList[1:3] = ["m", "n"]
print(myList)

# myList.pop(1)
# myList.pop()
# print(myList)

# del myList[1:3]
# print(myList)

myList.remove("d")
print(myList)
-------------------------------------------------------
# Search in List

myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]


def searchInList(list, value):
    for i in myList:
        if i == value:
            return list.index(value)
            # print(list.index(value))
    return "element doesn't exist"


print(searchInList(myList, 4))
# searchInList(myList, 6)


if 2 in myList:
    print(myList.index(2))
else:
    print("Doesn't Exist")
----------------------------------------------------
# List Manipulation
# List Operation

# myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# a = [0, 1, 2, 3, 4, 5, 6]

# print(len(a))
# print(min(a))
# print(sum(a))
# print(max(a))
# print(sum(a)/len(a))

# a *= 4
# print(a)

# b = [4, 5, 6]
# c = a+b
# print(c)

# total = 0
# count = 0
# while (True):
#     inp = input("Enter a number: ")
#     if inp == "done":
#         break
#     value = float(inp)
#     total += value
#     count += 1
#     average = total / count
# print("Average: ", average)

myList = list()

while (True):

    inp = input("Enter a number: ")
    if inp == "done":
        break

    value = float(inp)

    myList.append(value)

average = sum(myList) / len(myList)

print("Average: ", average)
-------------------------------------------------------
#List & String

a = "spam-spam1-spam2"
delimiter = "-"
b = a.split(delimiter)
divide = "a"
c = a.split(divide)
print(b)
print(c)
print(delimiter.join(b))
print(divide.join(c))
print(delimiter.join(c))
---------------------------------------------------------
#Pitfalls of list

myList=[2,6,5,8,1,4,9]
originalList=myList[:]
myList.sort()
print(originalList)
print(myList)
------------------------------------------------------
# Array vs List
import numpy as np

myArray = np.array([1, 2, 3, 4, 5, 6])
myList = [1, 2, 3, 4, 5]

myArray1 = np.array([1, 2, 3, 4, 5, 6, "a"])
myList1 = [1, 2, 3, 4, 5, "a"]

print(myArray / 2)
print(myArray)
print(myList)

print(myArray1)
print(myList1)
----------------------------------------------------
# Create dictionary

mydict = dict()
print(mydict)

mydict1 = {}
print(mydict1)

engtoSp = {"one": "uno", "two": "dos", "three": "tres"}
print(engtoSp)

print(engtoSp["one"])
print(engtoSp["three"])
------------------------------------------------------
#  Update / add an element to the dictionary

myDict = {"name": "Aot", "age": 22}
myDict["address"] = "Dhaka, Mirpur-10"
myDict["study"] = "JUST"

print(myDict)
print(myDict["study"])
-------------------------------------------------------
#  Search through a dictionary

myDict = {"name": "Aot", "age": 22, "address": "Dhaka, Mirpur-10", "study": "JUST"}
print(myDict)


def traverseDict(dict):
    for key in dict:
        print (key, dict[key])


traverseDict(myDict)
------------------------------------------------------------
#  Delete or remove a dictionary

myDict = {"name": "Aot", "age": 22, "address": "Dhaka, Mirpur-10", "study": "JUST"}

# myDict.clear()
# del myDict["age"]
# del myDict

print(myDict)

# print(myDict.pop("study"))
# print(myDict.popitem())
--------------------------------------------------------------
#  Dictionary Methods

myDict = {"name": "Aot", "age": 22, "address": "Dhaka, Mirpur-10", "study": "JUST"}

# myDict.clear()
# newMyDict1 = myDict.copy()
# print(newMyDict1)

# newMyDict = {}.fromkeys([1, 2, 3], "aot")
# newMyDict = {}.fromkeys([1, 2, 3])
# print(newMyDict)

# print(myDict.get("age", 27))
# print(myDict.get("age"))
# print(myDict.get("city"))
# print(myDict.get("city", 23))
# print(myDict.popitem())

# print(myDict.items())
# print(myDict.setdefault("name", "added"))
# print(myDict.setdefault("name1", "added"))
# print(myDict.pop("name1", "not"))

print(myDict.keys())
print(myDict.values())

newDict = {"a": 1, "b": 2, "c": 3}
myDict.update(newDict)
print(myDict)
------------------------------------------------------------
#  Dictionary Methods

myDict = {"one": "uno", "two": "dos", "three": "tres", "four": "cuarto"}
print(len(myDict))

myDict2 = {"e": 1, "o": 2, "a": 6, "u": 9, "i": 32}
print(sorted(myDict2))
print(sorted(myDict2, reverse = True))

myDict2 = {"aee": 1, "iouo": 2, "aeiot": 6, "un": 9, "i": 32}
print(sorted(myDict2, key=len))
print(sorted(myDict2, reverse=True, key=len))

# print("one" in myDict)
# print("uno" in myDict.values())

# for key in myDict:
#     print(key, myDict[key])
# print(key)

# myDict1 = {1: True, 2: True, 3: True}
# myDict1 = {0: True, 1: False, 2: False}
# myDict1 = {}
# print(all(myDict1))

# myDict1 = {1: True, 2: True, 3: False}
# myDict1 = {0: True, 1: False, 2: False}
# myDict1 = {}
# print(any(myDict1))

myDict1 = {1: True, 2: True, 3: False}
print(len(myDict1))
-----------------------------------------------------------------------------------
# Access Tuple elements


newTuple1 = tuple("abcdefg")
newTuple = ("a", "b", "c", "d", "e")
print(newTuple)
print(newTuple[0])
print(newTuple[-2])
print(newTuple[1:5])
print(newTuple[:4])
print(newTuple[:])
print(newTuple[2:])
newTuple2 = ("a",)
print(newTuple2)
------------------------------------------------------
# Traverse Tuple elements


newTuple = ("a", "b", "c", "d", "e")

for i in newTuple:
    print(i)

for i in range(len(newTuple)):
    print(newTuple[i])
--------------------------------------------------
# Search Tuple elements


newTuple = ("a", "b", "c", "d", "e")

print("c" in newTuple)
print("f" in newTuple)


def searchTuple(tuple, element):
    for i in tuple:
        if i == element:
            return tuple.index(i)
    return "Element does not exist"


print(searchTuple(newTuple, "e"))
print(searchTuple(newTuple, "f"))
---------------------------------------------------------
# Tuple Operations / Functions

newTuple = (1, 3, 5, 4, 2, 6)
newTuple1 = (3, 2, 1, 4, 6, 2, 3, 2)

print(newTuple + newTuple1)
print(newTuple * 3)
print(4 in newTuple)
print(7 in newTuple)
print(7 in newTuple)
print(newTuple1.count(2))
print(newTuple.index(5))
print(len(newTuple))
print(max(newTuple))
print(min(newTuple))


print(tuple([1, 4, 6, 8, 9]))
--------------------------------------------------------
#Singly Linked List:
class Node:
    def __init__(self, value=None):
        self.value = value
        self.next = None


class SLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def __iter__(self):
        node = self.head
        while node:
            yield node
            node = node.next

    # Insertion of element:

    def insertSLL(self, value, location):
        newNode = Node(value)
        if self.head is None:
            self.head = newNode
            self.tail = newNode
        else:
            if location == 0:
                newNode.next = self.head
                self.head = newNode
            elif location == -1:
                newNode.next = None
                self.tail.next = newNode
                self.tail = newNode
            else:
                tempNode = self.head
                index = 0
                while index < location - 1:
                    tempNode = tempNode.next
                    index += 1
                nextNode = tempNode.next
                tempNode.next = newNode
                newNode.next = nextNode
                if tempNode == self.tail:
                    self.tail = newNode

    # Traverse Singly Linked List:

    def traverseSLL(self):
        if self.head is None:
            print("Element does not exist")
        else:
            node = self.head
            while node is not None:
                print(node.value)
                node = node.next

    # Search for a node in Singly Linked List:

    def searchSLL(self, nodeValue):
        if self.head is None:
            return "The Singly linked list doesn't exist."
        else:
            node = self.head
            while node is not None:
                if node.value == nodeValue:
                    return node.value
                node = node.next
            return "Value doesn't exist in the list."

    #  Delete a node from Singly Linked List

    def deleteNode(self, location):
        if self.head is None:
            print("The Singly linked list doesn't exist.")
        else:
            if location == 0:
                if self.head == self.tail:
                    self.head = None
                    self.tail = None
                else:
                    self.head = self.head.next
            elif location == -1:
                if self.head == self.tail:
                    self.head = None
                    self.tail = None
                else:
                    node = self.head
                    while node is not None:
                        if node.next == self.tail:
                            break
                        node = node.next
                    node.next = None
                    self.tail = node
            else:
                tempNode = self.head
                index = 0
                while index < location - 1:
                    tempNode = tempNode.next
                    index += 1
                nextNode = tempNode.next
                tempNode.next = nextNode.next

# Delete entire SLL

    def deleteESLL(self):
        if self.head == None:
            print("The SLL doesn't exist.")
        else:
            self.head = None
            self.tail = None


singlyLinkedList = SLinkedList()
singlyLinkedList.insertSLL(1, 1)
singlyLinkedList.insertSLL(2, 1)
singlyLinkedList.insertSLL(3, 1)
singlyLinkedList.insertSLL(4, 1)

singlyLinkedList.insertSLL(0, 0)

singlyLinkedList.insertSLL(9, -1)

singlyLinkedList.insertSLL(6, 4)

print([node.value for node in singlyLinkedList])

singlyLinkedList.traverseSLL()

print(singlyLinkedList.searchSLL(2))
print(singlyLinkedList.searchSLL(22))

print([node.value for node in singlyLinkedList])

singlyLinkedList.deleteNode(0)
singlyLinkedList.deleteNode(-1)
singlyLinkedList.deleteNode(3)

print([node.value for node in singlyLinkedList])

print([node.value for node in singlyLinkedList])

singlyLinkedList.deleteESLL()

print([node.value for node in singlyLinkedList])

-----------------------------------------------------------------------------
# Circular Singly Linked List:
class Node:
    def __init__(self, value=None):
        self.value = value
        self.next = None


class CircularSinglyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def __iter__(self):
        node = self.head
        while node:
            yield node
            node = node.next
            if node == self.tail.next:
                break

    # Creation of Circular Singly Linked List:
    def createCSLL(self, nodeValue):
        node = Node(nodeValue)
        node.next = node
        self.head = node
        self.tail = node
        return "The CSLL has been created."

    # Insertion of Circular Singly Linked List:
    def insertCSLL(self, value, location):
        if self.head is None:
            return "The CSLL doesn't exist."
        else:
            newNode = Node(value)
            if location == 0:
                newNode.next = self.head
                self.head = newNode
                self.tail.next = newNode
            elif location == -1:
                newNode.next = self.tail.next
                self.tail.next = newNode
                self.tail = newNode
            else:
                tempNode = self.head
                index = 0
                while index < location - 1:
                    tempNode = tempNode.next
                    index += 1
                nextNode = tempNode.next
                tempNode.next = newNode
                newNode.next = nextNode
            return "The node has been successfully inserted."

    # Traversal of Circular Singly Linked List:
    def traversalCSLL(self):

        if self.head is None:
            return "There's no element for traversal."
        else:
            tempNode = self.head
            while tempNode:
                print(tempNode.value)
                tempNode = tempNode.next
                if tempNode == self.tail.next:
                    break

    # Searching of Circular Singly Linked List:
    def searchCSLL(self, nodeValue):
        if self.head is None:
            return "There's no element for searching."
        else:
            tempNode = self.head
            while tempNode:
                if tempNode.value == nodeValue:
                    return tempNode.value
                tempNode = tempNode.next
                if tempNode == self.tail.next:
                    return "The node doesn't exist."

    # Deletion of Circular Singly Linked List:
    def deleteNode(self, location):
        if self.head is None:
            print("There's no element for searching.")
        else:
            if location == 0:
                if self.head == self.tail:
                    self.head.next = None
                    self.head = None
                    self.tail = None
                else:
                    self.head = self.head.next
                    self.tail.next = self.head
            elif location == -1:
                if self.head == self.tail:
                    self.head.next = None
                    self.head = None
                    self.tail = None
                else:
                    node = self.head
                    while node is not None:
                        if node.next == self.tail:
                            break
                        node = node.next
                    node.next = self.head
                    self.tail = node
            else:
                tempNode = self.head
                index = 0
                while index < location - 1:
                    tempNode = tempNode.next
                    index += 1
                nextNode = tempNode.next
                tempNode.next = nextNode.next

    # Deletion of Entire Circular Singly Linked List:
    def deleteEntireCSLL(self):
        self.head = None
        self.tail.next = None
        self.tail = None


circularSLL = CircularSinglyLinkedList()
# print(circularSLL.createCSLL(1))

circularSLL.createCSLL(1)

print([node.value for node in circularSLL])

circularSLL = CircularSinglyLinkedList()
print(circularSLL.createCSLL(1))

circularSLL.insertCSLL(0, 0)
circularSLL.insertCSLL(4, -1)
circularSLL.insertCSLL(3, -1)
circularSLL.insertCSLL(2, 2)
circularSLL.insertCSLL(1, 1)

circularSLL.traversalCSLL()

print(circularSLL.searchCSLL(3))
print(circularSLL.searchCSLL(6))

print([node.value for node in circularSLL])

circularSLL.deleteNode(0)
circularSLL.deleteNode(-1)
circularSLL.deleteNode(3)
print([node.value for node in circularSLL])

circularSLL.deleteEntireCSLL()
print([node.value for node in circularSLL])
-----------------------------------------------------------------------
# Doubly Linked List:

class Node:
    def __init__(self, value=None):
        self.value = value
        self.prev = None
        self.next = None


class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def __iter__(self):
        node = self.head
        while node:
            yield node
            node = node.next

    # Creation of Doubly Linked List:
    def createDLL(self, nodeValue):
        node = Node(nodeValue)
        node.prev = None
        node.next = None
        self.head = node
        self.tail = node
        return "The Doubly Linked List has been created successfully."

    # Insertion of Doubly Linked List:
    def insertNode(self, nodeValue, location):
        if self.head is None:
            print("The DLL doesn't exist.")
        else:
            newNode = Node(nodeValue)
            if location == 0:
                newNode.prev = None
                newNode.next = self.head
                self.head = newNode
                self.head.prev = newNode
            elif location == -1:
                newNode.next = None
                newNode.prev = self.tail
                self.tail.next = newNode
                self.tail = newNode
            else:
                tempNode = self.head
                index = 0
                while index < location - 1:
                    tempNode = tempNode.next
                    index += 1
                newNode.next = tempNode.next
                newNode.prev = tempNode
                newNode.next.prev = newNode
                tempNode.next = newNode

    # Traversal of Doubly Linked List:
    def traverseDLL(self):
        if self.head is None:
            print("There's is no any element to traverse.")
        else:
            tempNode = self.head
            while tempNode:
                print(tempNode.value)
                tempNode = tempNode.next

    # Reverse Traversal of Doubly Linked List:
    # def reverseTraversalDLL(self):
    #     if self.head is None:
    #         print("There's is no any element to reverse traverse.")
    #     else:
    #         tempNode = self.tail
    #         while tempNode:
    #             print(tempNode.value)
    #             tempNode = tempNode.prev

    # Search of a node Doubly Linked List:
    def searchDLL(self, nodeValue):
        if self.head is None:
            print("There's is no any element to search.")
        else:
            tempNode = self.head
            while tempNode:
                if tempNode.value == nodeValue:
                    return tempNode.value
                tempNode = tempNode.next
            return "There is no such element."

    # Deletion of a node Doubly Linked List:
    def deleteNode(self, location):
        if self.head is None:
            print("There's is no any element in DLL.")
        else:
            if location == 0:
                if self.head == self.tail:
                    self.head = None
                    self.tail = None
                else:
                    self.head = self.head.next
                    self.head.prev = None
            elif location == -1:
                if self.head == self.tail:
                    self.head = None
                    self.tail = None
                else:
                    self.tail = self.tail.prev
                    self.tail.next = None
            else:
                curNode = self.head
                index = 0
                while index < location - 1:
                    curNode = curNode.next
                    index += 1
                curNode.next = curNode.next.next
                curNode.next.prev = curNode
            print("The node has been successfully deleted.")

    # Deletion of entire node in Doubly Linked List:
    def deleteEntireDLL(self):
        if self.head is None:
            return "There's is no any element in DLL"
        else:
            tempNode=self.head
            while tempNode:
                tempNode.prev=None
                tempNode=tempNode.next
            self.head=None
            self.tail=None
            return "The DLL has been successfully deleted."

doublyLL = DoublyLinkedList()
doublyLL.createDLL(2)

print([node.value for node in doublyLL])

doublyLL.insertNode(0, 0)
doublyLL.insertNode(1, 1)
doublyLL.insertNode(2, 1)
doublyLL.insertNode(3, 2)
doublyLL.insertNode(7, -1)
doublyLL.insertNode(6, -1)

print([node.value for node in doublyLL])

doublyLL.traverseDLL()

doublyLL.reverseTraversalDLL()

print(doublyLL.searchDLL(9))

doublyLL.deleteNode(0)
doublyLL.deleteNode(-1)
doublyLL.deleteNode(3)
print([node.value for node in doublyLL])
------------------------------------------------------------------------------
# Circular Doubly Linked List:
class Node:
    def __init__(self, value=None):
        self.value = value
        self.prev = None
        self.next = None


class CircularDoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def __iter__(self):
        node = self.head
        while node:
            yield node
            node = node.next
            if node == self.tail.next:
                break

    # Creation of Circular Doubly Linked List:
    def createCDLL(self, nodeValue):
        newNode = Node(nodeValue)
        self.head = newNode
        self.tail = newNode
        newNode.prev = newNode
        newNode.next = newNode
        return "The Circular Doubly Linked List has created successfully."

    # Insertion of Circular Doubly Linked List:
    def insertCDLL(self, value, location):
        if self.head is None:
            print("The Circular Doubly Linked List doesn't exist.")
        else:
            newNode = Node(value)
            if location == 0:
                newNode.next = self.head
                newNode.prev = self.tail
                self.head.prev = newNode
                self.head = newNode
                self.tail.next = newNode
            elif location == -1:
                newNode.next = self.head
                newNode.prev = self.tail
                self.head.prev = newNode
                self.tail.next = newNode
                self.tail = newNode
            else:
                tempNode = self.head
                index = 0
                while index < location - 1:
                    tempNode = tempNode.next
                    index += 1
                newNode.next = tempNode.next
                newNode.prev = tempNode
                newNode.next.prev = newNode
                tempNode.next = newNode
            return "The node has been successfully inserted."

    # Traversal of Circular Doubly Linked List:
    def traversalCDLL(self):
        if self.head is None:
            print("There is not any node to traverse.")
        else:
            tempNode = self.head
            while tempNode:
                print(tempNode.value)
                if tempNode == self.tail:
                    break
                tempNode = tempNode.next

    # Reverse Traversal of Circular Doubly Linked List:
    def reverseTraversalCDLL(self):
        if self.head is None:
            print("There is not any node to traverse.")
        else:
            tempNode = self.tail
            while tempNode:
                print(tempNode.value)
                if tempNode == self.head:
                    break
                tempNode = tempNode.prev

    # Search of a node in Circular Doubly Linked List:
    def searchCDLL(self, nodeValue):
        if self.head is None:
            return "There is not any node to search."
        else:
            tempNode = self.head
            while tempNode:
                if tempNode.value == nodeValue:
                    return nodeValue
                if tempNode == self.tail:
                    return "There is no such node."
                tempNode = tempNode.next

    # Deletion of a node in Circular Doubly Linked List:
    def deleteNode(self,location):
        if self.head is None:
            return "There's is no any element in CDLL."
        else:
            if location == 0:
                if self.head == self.tail:
                    self.head.prev=None
                    self.head.next=None
                    self.head = None
                    self.tail = None
                else:
                    self.head = self.head.next
                    self.head.prev = self.tail
                    self.tail.next=self.head
            elif location==-1:
                if self.head == self.tail:
                    self.head.prev=None
                    self.head.next=None
                    self.head = None
                    self.tail = None
                else:
                    self.tail = self.tail.prev
                    self.tail.next=self.head
                    self.head.prev = self.tail
            else:
                curNode=self.head
                index=0
                while index<location-1:
                    curNode=curNode.next
                    index+=1
                curNode.next=curNode.next.next
                curNode.next.prev=curNode
            return "The node has successfully deleted."

    # Deletion of a node in Circular Doubly Linked List:
    def deleteCDLL(self):
        if self.head is None:
            return "There's is no any element in CDLL."
        else:
            self.tail.next=None
            tempNode=self.head
            while tempNode:
                tempNode.prev=None
                tempNode=tempNode.next
            self.head=None
            self.tail=None
            return "The CDLL has successfully deleted."

circularDLL = CircularDoublyLinkedList()

print(circularDLL.createCDLL(2))

circularDLL.insertCDLL(0, 0)
circularDLL.insertCDLL(5, -1)
circularDLL.insertCDLL(3, 2)
circularDLL.insertCDLL(4, 3)

print([node.value for node in circularDLL])
circularDLL.traversalCDLL()
circularDLL.reverseTraversalCDLL()

print(circularDLL.searchCDLL(6))

circularDLL.deleteNode(0)
circularDLL.deleteNode(3)
circularDLL.deleteNode(-1)
print([node.value for node in circularDLL])

print(circularDLL.deleteCDLL())
print([node.value for node in circularDLL])
-------------------------------------------------------------------------
# Stack Operations (Methods withoout limit):
class Stack:
    def __init__(self):
        self.list = []

    def __str__(self):
        values = self.list.reverse()
        values = [str(x) for x in self.list]
        return "\n".join(values)

    # isEmpty:
    def isEmpty(self):
        if self.list == []:
            return True
        else:
            return False

    # push:
    def push(self, value):
        self.list.append(value)
        return "The element has been successfully inserted."

    #pop:
    def pop(self):
        if self.isEmpty():
            return "There element is no element in the stack."
        else:
            return self.list.pop()

    #Peek:
    def peek(self):
        if self.isEmpty():
            return "There element is no element in the stack."
        else:
            return self.list[len(self.list)-1]

    #delete:
    def delete(self):
        self.list=None
        return "Stack deleted successfully."

customStack = Stack()
customStack.push(1)
customStack.push(2)
customStack.push(3)

print(customStack.peek())

print(customStack.delete())

customStack = Stack()
print(customStack.isEmpty())

customStack.push(1)
customStack.push(2)
customStack.push(3)
print(customStack.pop())
print(customStack)

print(customStack)
-------------------------------------------------------------------------
# Stack Operations (Methods with limit):
class Stack:
    def __init__(self, maxSize):
        self.maxSize = maxSize
        self.list = []

    def __str__(self):
        values = self.list.reverse()
        values = [str(x) for x in self.list]
        return "\n".join(values)

    # isEmpty:
    def isEmpty(self):
        if self.list == []:
            return True
        else:
            return False

    # isFull:
    def isFull(self):
        if len(self.list) == self.maxSize:
            return True
        else:
            return False

    # Push:
    def push(self, value):
        if self.isFull():
            return "The stack is full."
        else:
            self.list.append(value)
            return "The element has been successfully inserted."

    # pop:
    def pop(self):
        if self.isEmpty():
            return "There is no element in the stack."
        else:
            return self.list.pop()

    # peek
    def peek(self):
        if self.isEmpty():
            return "There is not any element in the stack"
        else:
            return self.list[len(self.list) - 1]

    #  delete
    def delete(self):
        self.list = None


customStack = Stack(3)
print(customStack.isEmpty())
print(customStack.push(1))
print(customStack.push(2))
print(customStack.push(3))
print(customStack.peek())
print(customStack.pop())
print(customStack)
print(customStack.isFull())
print(customStack.delete())
----------------------------------------------------------------------------
# Stack Operations (Methods with Linked List):
class Node:
    def __init__(self, value=None):
        self.value = value
        self.next = next


class LinkedList:
    def __init__(self):
        self.head = None

    def __iter__(self):
        curNode = self.head
        while curNode:
            yield curNode
            curNode = curNode.next


class Stack:
    def __init__(self):
        self.LinkedList = LinkedList()

    def __str__(self):
        values = [str(x.value) for x in self.LinkedList]
        return '\n'.join(values)

    # isEmpty:
    def isEmpty(self):
        if self.LinkedList.head == None:
            return True
        else:
            return False

    # Push:
    def push(self, value):
        node = Node(value)
        node.next = self.LinkedList.head
        self.LinkedList.head = node

    # pop:
    def pop(self):
        if self.isEmpty():
            return "There is not any element in the stack."
        else:
            nodeValue = self.LinkedList.head.value
            self.LinkedList.head = self.LinkedList.head.next
            return nodeValue

    # pop:
    def peek(self):
        if self.isEmpty():
            return "There is not any element in the stack."
        else:
            nodeValue = self.LinkedList.head.value
            return nodeValue

    #  delete
    def delete(self):
        self.LinkedList.head=None

customStack = Stack()
print(customStack.isEmpty())
customStack.push(1)
customStack.push(2)
customStack.push(3)
print(customStack)
print("-----------------------")
print(customStack.peek())
print(customStack.pop())
print("-----------------------")
print(customStack)
customStack.delete()
print(customStack)
---------------------------------------------------------------
# Queue Operations (With no Size):
class Queue:
    def __init__(self):
        self.items = []

    def __str__(self):
        values = [str(x) for x in self.items]
        return ' '.join(values)

    def isEmpty(self):
        if self.items == []:
            return True
        else:
            return False

    def enqueue(self, values):
        self.items.append(values)
        return "The element is inserted at the end of Queue."

    def dequeue(self):
        if self.isEmpty():
            return "The is not any element in the Queue."
        else:
            return self.items.pop(0)

    def peek(self):
        if self.isEmpty():
            return "The is not any element in the Queue."
        else:
            return self.items[0]

    def deleteQueue(self):
        self.items = None

customQueue = Queue()
print(customQueue.isEmpty())
customQueue.enqueue(1)
customQueue.enqueue(2)
customQueue.enqueue(3)
customQueue.enqueue(4)
print(customQueue)
print("-----------------------")
print(customQueue.peek())
print(customQueue.dequeue())
print("-----------------------")
print(customQueue)
customQueue.deleteQueue()
print(customQueue.deleteQueue())
---------------------------------------------------------------
# Queue Operations (With Limit/Circular Queue):
class Queue:
    def __init__(self, maxSize):
        self.items = maxSize * [None]
        self.maxSize = maxSize
        self.start = -1
        self.top = -1

    def __str__(self):
        values = [str(x) for x in self.items]
        return ' '.join(values)

    def isFull(self):
        if self.top + 1 == self.start:
            return True
        elif self.start == 0 and self.top + 1 == self.maxSize:
            return True
        else:
            return False

    def isEmpty(self):
        if self.top == -1:
            return True
        else:
            return False

    def enqueue(self, value):
        if self.isFull():
            return "The queue is full."
        else:
            if self.top + 1 == self.maxSize:
                self.top = 0
            else:
                self.top += 1
                if self.start == -1:
                    self.start = 0
            self.items[self.top] = value
            return "The element is inserted at the end of Queue."

    def dequeue(self):
        if self.isEmpty():
            return "There is not any element in the Queue."
        else:
            firstElement = self.items[self.start]
            start = self.start
            if self.start == self.top:
                self.start = -1
                self.top = -1
            elif self.start + 1 == self.maxSize:
                self.start = 0
            else:
                self.start += 1
            self.items[start] = None
            return firstElement

    def peek(self):
        if self.isEmpty():
            return "There is not any element in the Queue."
        else:
            return self.items[self.start]

    def delete(self):
        self.items = self.maxSize * [None]
        self.top = -1
        self.start = -1


customQueue = Queue(3)
print(customQueue.isEmpty())
customQueue.enqueue(1)
customQueue.enqueue(2)
customQueue.enqueue(3)
print(customQueue)
print(customQueue.dequeue())
print("-----------------------")
print(customQueue.peek())
print(customQueue.isFull())
print(customQueue)
print("-----------------------")
customQueue.delete()
print(customQueue)
-----------------------------------------------------
# Queue Operations (Linked List):
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

    def __str__(self):
        return str(self.value)


class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def __iter__(self):
        curNode = self.head
        while curNode:
            yield curNode
            curNode = curNode.next


class Queue:
    def __init__(self):
        self.linkedList = LinkedList()

    def __str__(self):
        values = [str(x) for x in self.linkedList]
        return ' '.join(values)

    def enqueue(self, value):
        newNode = Node(value)
        if self.linkedList.head == None:
            self.linkedList.head = newNode
            self.linkedList.tail = newNode
        else:
            self.linkedList.tail.next = newNode
            self.linkedList.tail = newNode

    def isEmpty(self):
        if self.linkedList.head == None:
            return True
        else:
            return False

    def dequeue(self):
        if self.isEmpty():
            return "There is not any node in the Queue."
        else:
            tempNode = self.linkedList.head
            if self.linkedList.head == self.linkedList.tail:
                self.linkedList.head = None
                self.linkedList.tail = None
            else:
                self.linkedList.head = self.linkedList.head.next
            return tempNode

    def peek(self):
        if self.isEmpty():
            return "There is not any node in the Queue"
        else:
            return self.linkedList.head

    def delete(self):
        self.linkedList.head = None
        self.linkedList.tail = None
        return "There Queue is deleted successfully."

customQueue = Queue()
print(customQueue.isEmpty())
customQueue.enqueue(1)
customQueue.enqueue(2)
customQueue.enqueue(3)
customQueue.enqueue(4)
print(customQueue)
print(customQueue.isEmpty())
print("-----------------------")
print(customQueue.dequeue())
print(customQueue)
print("-----------------------")
print(customQueue.peek())
print(customQueue)
print(customQueue.delete())
print(customQueue)
---------------------------------------------------------------------------------
# How to use collections.deque as a FIFO queue:

from collections import deque

customQueue=deque(maxlen=4)
print(customQueue)

customQueue.append(1)
customQueue.append(2)
customQueue.append(3)
customQueue.append(4)
customQueue.append(5)
print(customQueue.popleft())
print(customQueue)
print(customQueue.clear())
print(customQueue)
----------------------------------------------------------------------------------
#Using queue method:
import queue as q

customQueue=q.Queue(maxsize=4)
print(customQueue.empty())
customQueue.put(1)
customQueue.put(2)
customQueue.put(3)
customQueue.put(4)
print(customQueue.qsize())
print(customQueue.full())
print(customQueue.get())
print(customQueue.qsize())
-------------------------------------------------------------------------------
#Using queue method:
import queue as q

customQueue=q.Queue(maxsize=4)
print(customQueue.empty())
customQueue.put(1)
customQueue.put(2)
customQueue.put(3)
customQueue.put(4)
print(customQueue.qsize())
print(customQueue.full())
print(customQueue.get())
print(customQueue.qsize())

# How to use multiprocessing.Queue as a FIFO queue:
from multiprocessing import Queue

custQueue=Queue(maxsize=4)
custQueue.put(1)
print(custQueue.get())
------------------------------------------------------------------
